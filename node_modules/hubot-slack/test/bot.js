// Generated by CoffeeScript 1.10.0
(function() {
  var Adapter, CatchAllMessage, EnterMessage, LeaveMessage, Message, TextMessage, TopicMessage, ref, should;

  should = require('should');

  ref = require.main.require('hubot'), Adapter = ref.Adapter, TextMessage = ref.TextMessage, EnterMessage = ref.EnterMessage, LeaveMessage = ref.LeaveMessage, TopicMessage = ref.TopicMessage, Message = ref.Message, CatchAllMessage = ref.CatchAllMessage;

  describe('Adapter', function() {
    return it('Should initialize with a robot', function() {
      return this.slackbot.robot.should.eql(this.stubs.robot);
    });
  });

  describe('Login', function() {
    return it('Should set the robot name', function() {
      return this.slackbot.robot.name.should.equal('bot');
    });
  });

  describe('Logger', function() {
    it('It should log missing token error', function() {
      var logger;
      logger = this.slackbot.robot.logger;
      this.slackbot.options.token = null;
      this.slackbot.run();
      logger.logs["error"].length.should.be.above(0);
      return logger.logs["error"][logger.logs["error"].length - 1].should.equal('No service token provided to Hubot');
    });
    return it('It should log invalid token error', function() {
      var logger;
      logger = this.slackbot.robot.logger;
      this.slackbot.options.token = "ABC123";
      this.slackbot.run() - logger.logs["error"].length.should.be.above(0);
      return logger.logs["error"][logger.logs["error"].length - 1].should.equal('Invalid service token provided, please follow the upgrade instructions');
    });
  });

  describe('Send Messages', function() {
    it('Should send a message', function() {
      var sentMessages;
      sentMessages = this.slackbot.send({
        room: 'general'
      }, 'message');
      sentMessages.length.should.equal(1);
      return sentMessages[0].should.equal('message');
    });
    it('Should send multiple messages', function() {
      var sentMessages;
      sentMessages = this.slackbot.send({
        room: 'general'
      }, 'one', 'two', 'three');
      return sentMessages.length.should.equal(3);
    });
    it('Should not send empty messages', function() {
      var sentMessages;
      sentMessages = this.slackbot.send({
        room: 'general'
      }, 'Hello', '', '', 'world!');
      return sentMessages.length.should.equal(2);
    });
    it('Should open a DM channel if needed', function() {
      var msg;
      msg = 'Test';
      this.slackbot.send({
        room: 'name'
      }, msg);
      return this.stubs._msg.should.eql('Test');
    });
    return it('Should use an existing DM channel if possible', function() {
      var msg;
      msg = 'Test';
      this.slackbot.send({
        room: 'user2'
      }, msg);
      return this.stubs._dmmsg.should.eql('Test');
    });
  });

  describe('Reply to Messages', function() {
    it('Should mention the user in a reply sent in a channel', function() {
      var sentMessages;
      sentMessages = this.slackbot.reply({
        user: this.stubs.user,
        room: this.stubs.channel.id
      }, 'message');
      sentMessages.length.should.equal(1);
      return sentMessages[0].should.equal("<@" + this.stubs.user.id + ">: message");
    });
    it('Should mention the user in multiple replies sent in a channel', function() {
      var sentMessages;
      sentMessages = this.slackbot.reply({
        user: this.stubs.user,
        room: this.stubs.channel.id
      }, 'one', 'two', 'three');
      sentMessages.length.should.equal(3);
      sentMessages[0].should.equal("<@" + this.stubs.user.id + ">: one");
      sentMessages[1].should.equal("<@" + this.stubs.user.id + ">: two");
      return sentMessages[2].should.equal("<@" + this.stubs.user.id + ">: three");
    });
    it('Should send nothing if messages are empty', function() {
      var sentMessages;
      sentMessages = this.slackbot.reply({
        user: this.stubs.user,
        room: this.stubs.channel.id
      }, '');
      return sentMessages.length.should.equal(0);
    });
    return it('Should NOT mention the user in a reply sent in a DM', function() {
      var sentMessages;
      sentMessages = this.slackbot.reply({
        user: this.stubs.user,
        room: 'D123'
      }, 'message');
      sentMessages.length.should.equal(1);
      return sentMessages[0].should.equal("message");
    });
  });

  describe('Setting the channel topic', function() {
    it('Should set the topic in channels', function() {
      this.slackbot.topic({
        room: this.stubs.channel.id
      }, 'channel');
      return this.stubs._topic.should.equal('channel');
    });
    return it('Should NOT set the topic in DMs', function() {
      this.slackbot.topic({
        room: 'D1232'
      }, 'DM');
      return should.not.exists(this.stubs._topic);
    });
  });

  describe('Receiving an error event', function() {
    return it('Should propogate that error', function() {
      this.hit = false;
      this.slackbot.robot.on('error', (function(_this) {
        return function(error) {
          error.msg.should.equal('ohno');
          return _this.hit = true;
        };
      })(this));
      this.hit.should.equal(false);
      this.slackbot.error({
        msg: 'ohno',
        code: -2
      });
      return this.hit.should.equal(true);
    });
  });

  describe('Handling incoming messages', function() {
    it('Should handle regular messages as hoped and dreamed', function() {
      this.slackbot.message({
        text: 'foo',
        user: this.stubs.user,
        channel: this.stubs.channel
      });
      return this.stubs._received.text.should.equal('foo');
    });
    it('Should prepend our name to a message addressed to us in a DM', function() {
      this.slackbot.message({
        text: 'foo',
        user: this.stubs.user,
        channel: this.stubs.DM
      });
      return this.stubs._received.text.should.equal(this.slackbot.robot.name + " foo");
    });
    it('Should handle channel_join events as envisioned', function() {
      this.slackbot.message({
        subtype: 'channel_join',
        user: this.stubs.user,
        channel: this.stubs.channel
      });
      should.equal(this.stubs._received instanceof EnterMessage, true);
      return this.stubs._received.user.id.should.equal(this.stubs.user.id);
    });
    it('Should handle channel_leave events as envisioned', function() {
      this.slackbot.message({
        subtype: 'channel_leave',
        user: this.stubs.user,
        channel: this.stubs.channel
      });
      should.equal(this.stubs._received instanceof LeaveMessage, true);
      return this.stubs._received.user.id.should.equal(this.stubs.user.id);
    });
    it('Should handle channel_topic events as envisioned', function() {
      this.slackbot.message({
        subtype: 'channel_topic',
        user: this.stubs.user,
        channel: this.stubs.channel
      });
      should.equal(this.stubs._received instanceof TopicMessage, true);
      return this.stubs._received.user.id.should.equal(this.stubs.user.id);
    });
    it('Should handle group_join events as envisioned', function() {
      this.slackbot.message({
        subtype: 'group_join',
        user: this.stubs.user,
        channel: this.stubs.channel
      });
      should.equal(this.stubs._received instanceof EnterMessage, true);
      return this.stubs._received.user.id.should.equal(this.stubs.user.id);
    });
    it('Should handle group_leave events as envisioned', function() {
      this.slackbot.message({
        subtype: 'group_leave',
        user: this.stubs.user,
        channel: this.stubs.channel
      });
      should.equal(this.stubs._received instanceof LeaveMessage, true);
      return this.stubs._received.user.id.should.equal(this.stubs.user.id);
    });
    it('Should handle group_topic events as envisioned', function() {
      this.slackbot.message({
        subtype: 'group_topic',
        user: this.stubs.user,
        channel: this.stubs.channel
      });
      should.equal(this.stubs._received instanceof TopicMessage, true);
      return this.stubs._received.user.id.should.equal(this.stubs.user.id);
    });
    it('Should handle unknown events as catchalls', function() {
      this.slackbot.message({
        subtype: 'hidey_ho',
        user: this.stubs.user,
        channel: this.stubs.channel
      });
      return should.equal(this.stubs._received instanceof CatchAllMessage, true);
    });
    return it('Should not crash with bot messages', function() {
      this.slackbot.message({
        subtype: 'bot_message',
        bot: this.stubs.bot,
        channel: this.stubs.channel,
        text: 'Pushing is the answer'
      });
      return should.equal(this.stubs._received instanceof TextMessage, true);
    });
  });

}).call(this);

//# sourceMappingURL=bot.js.map
